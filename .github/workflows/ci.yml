name: CI

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
    tags: ['**']
  pull_request:
    branches: [main]
    paths: ['src/**', 'tests/**']

env:
  COLUMNS: 120

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - uses: actions/checkout@v4

      - uses: pdm-project/setup-pdm@v4.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pdm sync -dG lint --no-self

      - uses: pre-commit/action@v3.0.1
        with:
          extra_args: --all-files --verbose
        env:
          SKIP: no-commit-to-branch

  # docs-build:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4

  #   - uses: astral-sh/setup-uv@v5
  #     with:
  #       python-version: '3.12'

  #   - name: Install dependencies
  #     # Unlike the docs build, we don't use mkdocs_material-insiders
  #     # Because the secret for accessing the library is not accessible from forks, but we still want to run
  #     # this job on public CI runs.
  #     run: uv sync --group docs

  #   - run: uv run python -c 'import docs.plugins.main'

  #   # Adding local symlinks gets nice source locations like
  #   #   pydantic_core/core_schema.py
  #   # instead of
  #   #   .venv/lib/python3.10/site-packages/pydantic_core/core_schema.py
  #   - name: prepare shortcuts for extra modules
  #     run: |
  #       ln -s .venv/lib/python*/site-packages/pydantic_core pydantic_core
  #       ln -s .venv/lib/python*/site-packages/pydantic_settings pydantic_settings
  #       ln -s .venv/lib/python*/site-packages/pydantic_extra_types pydantic_extra_types

  #   - run: uv run mkdocs build

  # test-memray:
  #   name: Test memray
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: astral-sh/setup-uv@v5
  #       with:
  #         python-version: '3.12'

  #     - name: install deps
  #       run: uv sync --group testing-extra

  #     - name: Run tests
  #       run: uv run pytest --ignore=tests/mypy/ --ignore=tests/test_docs.py --memray

  test:
    name: Test ${{ matrix.os }} / ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-latest, windows-latest]
        python-version: ['3.11', '3.12']

    env:
      OS: ${{ matrix.os }}
      DEPS: yes

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - uses: pdm-project/setup-pdm@v4.2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: pdm sync -dG test

    - run: 'pdm run python -c "import tempy; print(tempy.__version__)"'

    - run: mkdir coverage

    - name: Test with all extra dependencies
      run: pdm run coverage run -m pytest --durations=10
      env:
        COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}-with-deps
        CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}-with-deps

    - name: Store coverage files
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.os }}-${{ matrix.python-version }}
        path: coverage
        include-hidden-files: true

  coverage-combine:
    needs: [test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Get coverage files
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: coverage-*
          path: coverage

      - run: pip install coverage[toml]

      - run: ls -la coverage
      - run: coverage combine coverage
      - run: coverage report
      - run: coverage html --show-contexts --title "tempy coverage for ${{ github.sha }}"

      - name: Store coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data
          path: .coverage
          include-hidden-files: true

      - name: Store coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

  coverage-pr-comment:
    needs: coverage-combine
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          name: coverage-data

      - name: Generate coverage comment
        id: coverage-comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Store coverage comment
        uses: actions/upload-artifact@v4
        if: steps.coverage-comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt


  # https://github.com/marketplace/actions/alls-green
  check:  # This job does nothing and is only used for the branch protection
    if: always()

    outputs:
      result: ${{ steps.all-green.outputs.result }}

    needs:
      - lint
      # - docs-build
      - test

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        id: all-green
        with:
          jobs: ${{ toJSON(needs) }}

  # release:
  #   needs: [check]
  #   if: needs.check.outputs.result == 'success' && startsWith(github.ref, 'refs/tags/')
  #   runs-on: ubuntu-latest
  #   environment: release

  #   permissions:
  #     id-token: write

  #   outputs:
  #     pydantic-version: ${{ steps.check-tag.outputs.VERSION }}

  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.12'

  #     - name: Install 'build' library
  #       run: pip install -U build

  #     - name: Check version
  #       id: check-tag
  #       uses: samuelcolvin/check-python-version@v4.1
  #       with:
  #         version_file_path: pydantic/version.py

  #     - name: Build library
  #       run: python -m build

  #     - name: Upload package to PyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1

  # send-tweet:
  #   name: Send tweet
  #   needs: [release]
  #   if: needs.release.result == 'success'
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.12'
  #     - name: Install dependencies
  #       run: pip install tweepy==4.14.0
  #     - name: Send tweet
  #       shell: python
  #       run: |
  #         import os
  #         import tweepy

  #         client = tweepy.Client(
  #             access_token=os.getenv("TWITTER_ACCESS_TOKEN"),
  #             access_token_secret=os.getenv("TWITTER_ACCESS_TOKEN_SECRET"),
  #             consumer_key=os.getenv("TWITTER_CONSUMER_KEY"),
  #             consumer_secret=os.getenv("TWITTER_CONSUMER_SECRET"),
  #         )
  #         version = os.getenv("VERSION").strip('"')

  #         if "b" in version:
  #             official_version = version[:version.index("b")]
  #             tweet = os.getenv("BETA_TWEET").format(version=version, official_version=official_version)
  #         else:
  #             tweet = os.getenv("TWEET").format(version=version)

  #         client.create_tweet(text=tweet)
  #       env:
  #         VERSION: ${{ needs.release.outputs.pydantic-version }}
  #         TWEET: |
  #           Pydantic version {version} is out! ðŸŽ‰

  #           https://github.com/pydantic/pydantic/releases/tag/v{version}
  #         BETA_TWEET: |
  #           Pydantic beta version {version} is out! ðŸš€

  #           Please try v{version} in the next week before we release v{official_version},
  #           and let us know if you encounter any issues!

  #           https://github.com/pydantic/pydantic/releases/tag/v{version}
  #         TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
  #         TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
  #         TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
  #         TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
